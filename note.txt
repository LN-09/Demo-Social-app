
C·∫•u tr√∫c d·ª± √°n Next:
/social-app
‚îú‚îÄ‚îÄ /public                 # Ch·ª©a ·∫£nh, favicon, fonts, etc.
‚îú‚îÄ‚îÄ /src
‚îÇ   ‚îú‚îÄ‚îÄ /app                # Next.js App Router (n·∫øu d√πng app router)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /(auth)         # Nh√≥m route cho authentication
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /dashboard      # Trang dashboard ch√≠nh
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx      # Layout ch√≠nh c·ªßa ·ª©ng d·ª•ng
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ page.tsx        # Trang ch√≠nh (root)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ loading.tsx     # M√†n h√¨nh loading chung
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ error.tsx       # Trang l·ªói chung
‚îÇ   ‚îú‚îÄ‚îÄ /components         # Ch·ª©a component UI t√°i s·ª≠ d·ª•ng
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Button.tsx      # Component Button chung
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Header.tsx      # Header chung
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Footer.tsx      # Footer chung
‚îÇ   ‚îú‚îÄ‚îÄ /features           # Chia nh·ªè ·ª©ng d·ª•ng theo t√≠nh nƒÉng
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /auth           # C√°c logic v·ªÅ authentication
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LoginForm.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RegisterForm.tsx
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ authSlice.ts (Redux slice)
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api.ts      # G·ªçi API auth
‚îÇ   ‚îú‚îÄ‚îÄ /hooks              # Hook custom t√°i s·ª≠ d·ª•ng
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useAuth.ts      # Custom hook cho auth
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useTheme.ts     # Hook cho dark mode
‚îÇ   ‚îú‚îÄ‚îÄ /lib                # Th∆∞ vi·ªán utils, functions
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ axiosClient.ts  # Config Axios
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ fetcher.ts      # Fetch API v·ªõi SWR/React Query
‚îÇ   ‚îú‚îÄ‚îÄ /providers          # Ch·ª©a c√°c context provider
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ThemeProvider.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AuthProvider.tsx
‚îÇ   ‚îú‚îÄ‚îÄ /redux              # C·∫•u tr√∫c Redux Toolkit
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ store.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ slices/
‚îÇ   ‚îú‚îÄ‚îÄ /styles             # Ch·ª©a file Tailwind/global styles
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ globals.css
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ tailwind.css
‚îÇ   ‚îú‚îÄ‚îÄ /types              # Ch·ª©a c√°c type v√† interface
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ user.ts
‚îÇ   ‚îú‚îÄ‚îÄ /utils              # Ch·ª©a c√°c h√†m ti·ªán √≠ch chung
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ helpers.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ constants.ts
‚îÇ   ‚îú‚îÄ‚îÄ /validators         # Schema validation (Yup/Zod)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ authSchema.ts
|---|   middleware.ts
‚îú‚îÄ‚îÄ .env                    # Environment variables
‚îú‚îÄ‚îÄ .eslintrc.js            # ESLint config
‚îú‚îÄ‚îÄ .prettierrc             # Prettier config
‚îú‚îÄ‚îÄ next.config.js          # Next.js config
‚îú‚îÄ‚îÄ tsconfig.json           # TypeScript config
‚îú‚îÄ‚îÄ package.json            # Package dependencies


Middleware d√πng ƒë·ªÉ l√†m g√¨ ?
‚úÖ X√°c th·ª±c (Authentication) tr∆∞·ªõc khi v√†o trang
‚úÖ Redirect URL d·ª±a tr√™n ƒëi·ªÅu ki·ªán
‚úÖ Ch·∫∑n ho·∫∑c x·ª≠ l√Ω request tr∆∞·ªõc khi n√≥ ƒë·∫øn API ho·∫∑c page.


Shadcn:

.husky: d√πng ƒë·ªÉ khi commit s·∫Ω duy·ªát commit


Highlights:
üöÄ Tech stack: Next.js App Router, Postgres, Prisma, Clerk & TypeScript
üíª Server Components, Layouts, Route Handlers, Server Actions
üî• Special Next.js files: loading.tsx, error.tsx, not-found.tsx
üì° API Integration using Route Handlers
üîÑ Data Fetching, Caching & Revalidation
üé≠ Client & Server Components
üõ£Ô∏è Dynamic & Static Routes
üé® Styling with Tailwind & Shadcn
üîí Authentication & Authorization
-üì§ File Uploads with UploadThing
üóÉÔ∏è Database Integration with Prisma
üöÄ Server Actions & Forms
-‚ö° Optimistic Updates


1Ô∏è‚É£ K·∫øt n·ªëi Postman v·ªõi Neon Database ƒë·ªÉ g·ª≠i truy v·∫•n SQL
Neon l√† m·ªôt d·ªãch v·ª• PostgreSQL tr√™n cloud, b·∫°n c√≥ th·ªÉ k·∫øt n·ªëi n√≥ v·ªõi Postman ƒë·ªÉ g·ª≠i truy v·∫•n SQL tr·ª±c ti·∫øp.

üîπ B∆∞·ªõc 1: L·∫•y th√¥ng tin k·∫øt n·ªëi t·ª´ Neon
Truy c·∫≠p Neon Database ‚Üí ƒêƒÉng nh·∫≠p.
Ch·ªçn Database c·ªßa b·∫°n ‚Üí Connection Details.
Sao ch√©p th√¥ng tin Connection string (th∆∞·ªùng c√≥ d·∫°ng):
plaintext
Sao ch√©p
Ch·ªânh s·ª≠a
postgres://username:password@host:port/database
üîπ B∆∞·ªõc 2: C·∫•u h√¨nh Postman ƒë·ªÉ k·∫øt n·ªëi v·ªõi Neon
Postman kh√¥ng h·ªó tr·ª£ PostgreSQL tr·ª±c ti·∫øp, nh∆∞ng b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng REST API proxy nh∆∞ PostgREST ho·∫∑c m·ªôt backend trung gian.

üî∏ C√°ch 1: D√πng Supabase (PostgREST)

ƒêƒÉng k√Ω Supabase v√† k·∫øt n·ªëi Neon v·ªõi Supabase.
L·∫•y RESTful API URL c·ªßa Supabase (ƒë√≥ng vai tr√≤ trung gian gi·ªØa Postman v√† Neon).
D√πng Postman ƒë·ªÉ g·ª≠i request GET/POST/PUT/DELETE ƒë·∫øn API c·ªßa Supabase.
üî∏ C√°ch 2: D√πng m·ªôt API trung gian
N·∫øu b·∫°n c√≥ m·ªôt Node.js Express API ho·∫∑c NestJS, b·∫°n c√≥ th·ªÉ:

T·∫°o m·ªôt API nh·∫≠n request t·ª´ Postman.
API s·∫Ω d√πng pg-promise ho·∫∑c node-postgres (pg) ƒë·ªÉ k·∫øt n·ªëi v·ªõi Neon.
Tr·∫£ k·∫øt qu·∫£ JSON v·ªÅ Postman.
2Ô∏è‚É£ T·∫°o API s·ª≠ d·ª•ng Neon r·ªìi ki·ªÉm th·ª≠ v·ªõi Postman
B·∫°n c√≥ th·ªÉ x√¢y d·ª±ng m·ªôt API ƒë∆°n gi·∫£n v·ªõi Node.js ƒë·ªÉ l√†m trung gian gi·ªØa Neon v√† Postman.

üîπ B∆∞·ªõc 1: C√†i ƒë·∫∑t th∆∞ vi·ªán PostgreSQL cho Node.js
bash
Sao ch√©p
Ch·ªânh s·ª≠a
npm install pg express cors dotenv
üîπ B∆∞·ªõc 2: Vi·∫øt API k·∫øt n·ªëi v·ªõi Neon
T·∫°o file server.js:

javascript
Sao ch√©p
Ch·ªânh s·ª≠a
require('dotenv').config();
const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');

const app = express();
app.use(cors());
app.use(express.json());

// K·∫øt n·ªëi ƒë·∫øn Neon
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }, // Quan tr·ªçng khi k·∫øt n·ªëi Neon
});

// Endpoint ƒë·ªÉ l·∫•y danh s√°ch users
app.get('/users', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM users');
    res.json(result.rows);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Ch·∫°y server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
üîπ B∆∞·ªõc 3: Ki·ªÉm th·ª≠ API v·ªõi Postman
Ch·∫°y server:
bash
Sao ch√©p
Ch·ªânh s·ª≠a
node server.js
M·ªü Postman ‚Üí Ch·ªçn GET ‚Üí Nh·∫≠p URL API:
bash
Sao ch√©p
Ch·ªânh s·ª≠a
http://localhost:5000/users
Nh·∫•n Send ‚Üí N·∫øu th√†nh c√¥ng, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c danh s√°ch users t·ª´ Neon.
3Ô∏è‚É£ C·∫•u h√¨nh m√¥i tr∆∞·ªùng trong Postman ƒë·ªÉ l√†m vi·ªác v·ªõi Neon
N·∫øu API c·ªßa b·∫°n c√≥ nhi·ªÅu m√¥i tr∆∞·ªùng (local, dev, production), b·∫°n c√≥ th·ªÉ d√πng Environment Variables trong Postman.

üîπ B∆∞·ªõc 1: T·∫°o m√¥i tr∆∞·ªùng
M·ªü Postman ‚Üí Ch·ªçn Environments ‚Üí Nh·∫•n New.
Th√™m bi·∫øn:
nginx
Sao ch√©p
Ch·ªânh s·ª≠a
DATABASE_URL = postgres://username:password@host:port/database
üîπ B∆∞·ªõc 2: S·ª≠ d·ª•ng bi·∫øn trong request
Trong Postman, thay v√¨ nh·∫≠p URL tr·ª±c ti·∫øp, d√πng:
bash
Sao ch√©p
Ch·ªânh s·ª≠a
{{DATABASE_URL}}/users
ƒêi·ªÅu n√†y gi√∫p b·∫°n d·ªÖ d√†ng chuy·ªÉn ƒë·ªïi gi·ªØa c√°c m√¥i tr∆∞·ªùng (dev, test, prod).

4Ô∏è‚É£ K·∫øt lu·∫≠n
‚úÖ B·∫°n c√≥ th·ªÉ d√πng Postman v·ªõi Neon b·∫±ng c√°ch:

Truy v·∫•n Neon tr·ª±c ti·∫øp qua PostgREST ho·∫∑c API trung gian.
X√¢y d·ª±ng API k·∫øt n·ªëi Neon v·ªõi Postman qua Node.js.
S·ª≠ d·ª•ng Postman Environments ƒë·ªÉ qu·∫£n l√Ω bi·∫øn m√¥i tr∆∞·ªùng.
